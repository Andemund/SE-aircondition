具体的业务逻辑：
1、服务器端监听某个端口。
2、客户端每隔1s向服务器端回传当前温度。
3、客户端发送请求报文——打开/关闭空调、设定温度、风速。
4、服务器端根据收到的客户端请求报文，综合该房间的温度信息（房间有一个初始温度，是一个默认值。在第一次收到该房间的请求报文时，与此默认值比较。若客户端已回传房间当前温度，则以回传温度为准），决定是否向该房间送风。若送风，则开始计费，否则不计费。并向客户端回传响应报文。
5、客户端根据收到的响应报文在窗口中显示空调的开闭、温度、风速信息；并模拟温度变化，每隔1s向服务器端回传当前温度；若客户需改变空调参数，则重复3-5步即可。
6、服务器端根据客户端实时回传的温度信息控制空调送风，若已达到设定温度，则停止送风。当房间温度与设定的温度之差大于某个特定值（可以在服务器端设定）后，重新开始送风。

报文格式（使用json）
客户端分为两种报文：
1、请求报文：
包括开关空调，设定温度、风速。格式如下：
{"type":0,"switch":1,"temperature":25.80,"wind":1}
type:0表示请求报文；
switch:1表示打开空调，0表示关闭空调；
temperature:表示设定的温度，为浮点数；
wind:表示风速，0-无风，相当于空调不送风，房间温度随环境变化；1-微风，温度每秒向设定温度变化0.1度；2-中风，温度每秒变化0.2度。
2、通告报文：
客户端每隔1s向服务器回传当前的状态（当前温度）。格式如下：
{"type":1,"temperature":25.80}
type:1表示通告报文；
temperature:表示当前室温。

服务器端报文：
通知客户端当前费用，和客户端的空调参数。格式如下：
{"switch":1/0,"temperature":25.80,"wind":1,cost:2.00}
switch:1表示打开空调，0表示关闭空调；
temperature:表示设定的温度，为浮点数；
wind:表示风速。
